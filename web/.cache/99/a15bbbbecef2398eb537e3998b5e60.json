{"id":"../node_modules/draft-js/lib/DraftModifier.js","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\package.json","includedInParent":true,"mtime":1542353447145},{"name":"./CharacterMetadata","loc":{"line":16,"column":32},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\CharacterMetadata.js"},{"name":"./ContentStateInlineStyle","loc":{"line":17,"column":38},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\ContentStateInlineStyle.js"},{"name":"./DraftFeatureFlags","loc":{"line":18,"column":32},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftFeatureFlags.js"},{"name":"immutable","loc":{"line":19,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\immutable\\dist\\immutable.js"},{"name":"./applyEntityToContentState","loc":{"line":21,"column":40},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\applyEntityToContentState.js"},{"name":"./getCharacterRemovalRange","loc":{"line":22,"column":39},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\getCharacterRemovalRange.js"},{"name":"./getContentStateFragment","loc":{"line":23,"column":38},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\getContentStateFragment.js"},{"name":"./insertFragmentIntoContentState","loc":{"line":24,"column":45},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\insertFragmentIntoContentState.js"},{"name":"./insertTextIntoContentState","loc":{"line":25,"column":41},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\insertTextIntoContentState.js"},{"name":"fbjs/lib/invariant","loc":{"line":26,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\fbjs\\lib\\invariant.js"},{"name":"./modifyBlockForContentState","loc":{"line":27,"column":41},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\modifyBlockForContentState.js"},{"name":"./removeEntitiesAtEdges","loc":{"line":28,"column":36},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\removeEntitiesAtEdges.js"},{"name":"./removeRangeFromContentState","loc":{"line":29,"column":42},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\removeRangeFromContentState.js"},{"name":"./splitBlockInContentState","loc":{"line":30,"column":39},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\splitBlockInContentState.js"}],"generated":{"js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftModifier\n * @format\n * \n */\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\n\nvar ContentStateInlineStyle = require('./ContentStateInlineStyle');\n\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\n\nvar Immutable = require('immutable');\n\nvar applyEntityToContentState = require('./applyEntityToContentState');\n\nvar getCharacterRemovalRange = require('./getCharacterRemovalRange');\n\nvar getContentStateFragment = require('./getContentStateFragment');\n\nvar insertFragmentIntoContentState = require('./insertFragmentIntoContentState');\n\nvar insertTextIntoContentState = require('./insertTextIntoContentState');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar modifyBlockForContentState = require('./modifyBlockForContentState');\n\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\n\nvar removeRangeFromContentState = require('./removeRangeFromContentState');\n\nvar splitBlockInContentState = require('./splitBlockInContentState');\n\nvar OrderedSet = Immutable.OrderedSet;\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? \"development\" !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);\n  },\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey = void 0,\n        endKey = void 0,\n        startBlock = void 0,\n        endBlock = void 0;\n\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var _adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n\n        return removeRangeFromContentState(contentState, _adjustedRemovalRange);\n      }\n    }\n\n    var adjustedRemovalRange = rangeToRemove;\n\n    if (DraftFeatureFlags.draft_segmented_entities_behavior) {\n      // Adjust the selection to properly delete segemented and immutable\n      // entities\n      adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n    }\n\n    var withoutEntities = removeEntitiesAtEdges(contentState, adjustedRemovalRange);\n    return removeRangeFromContentState(withoutEntities, adjustedRemovalRange);\n  },\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        type: blockType,\n        depth: 0\n      });\n    });\n  },\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: blockData\n      });\n    });\n  },\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: block.getData().merge(blockData)\n      });\n    });\n  },\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\nmodule.exports = DraftModifier;","map":null},"hash":"594f349b98370370954159e9c1f86f4d","cacheData":{"env":{"NODE_ENV":"development"}}}