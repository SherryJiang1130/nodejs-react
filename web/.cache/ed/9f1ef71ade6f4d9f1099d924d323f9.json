{"id":"libs/main.jsx","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"../css/main.less","loc":{"line":1,"column":7},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\src\\css\\main.less"},{"name":"react","loc":{"line":2,"column":18},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\react\\index.js"},{"name":"react-dom","loc":{"line":3,"column":21},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\react-dom\\index.js"},{"name":"draft-js","loc":{"line":11,"column":7},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\Draft.js"},{"name":"react-color","loc":{"line":12,"column":29},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\react-color\\lib\\index.js"},{"name":"../api/index","loc":{"line":13,"column":23},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\src\\api\\index.js"},{"name":"./sideBar","loc":{"line":14,"column":20},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\src\\libs\\sideBar.jsx"},{"name":"./styleController","loc":{"line":15,"column":56},"parent":"D:\\myPro\\nodePro\\web\\src\\libs\\main.jsx","resolved":"D:\\myPro\\nodePro\\web\\src\\libs\\styleController.js"}],"generated":{"js":"\"use strict\";\n\nrequire(\"../css/main.less\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _draftJs = require(\"draft-js\");\n\nvar _reactColor = require(\"react-color\");\n\nvar _index = require(\"../api/index\");\n\nvar _sideBar = _interopRequireDefault(require(\"./sideBar\"));\n\nvar _styleController = require(\"./styleController\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n// Custom overrides for \"code\" style.\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    case 'COLOR':\n      return 'RichEditor-color';\n\n    case 'LEFT':\n      return 'align-left';\n\n    case 'CENTER':\n      return 'align-center';\n\n    case 'RIGHT':\n      return 'align-right';\n\n    default:\n      return null;\n  }\n}\n\nfunction forceRender() {\n  var currentState = store.getState();\n  var content = currentState.editor.editorState.getCurrentContent();\n\n  var newEditorState = _draftJs.EditorState.createWithContent(content, new CompositeDecorator([]));\n\n  store.dispatch({\n    type: UPDATE_EDITOR_STATE,\n    payload: newEditorState\n  });\n}\n\nvar RichEditorExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RichEditorExample, _React$Component);\n\n  function RichEditorExample(props) {\n    var _this;\n\n    _classCallCheck(this, RichEditorExample);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RichEditorExample).call(this, props));\n    _this.state = {\n      editorState: _draftJs.EditorState.createEmpty(),\n      title: '',\n      logList: [],\n      baseList: [],\n      editStatue: true,\n      editContent: '',\n      editId: '',\n      bgcolor: '',\n      displayColorPicker: false,\n      someValueChanged: false,\n      styleMap: {\n        CODE: {\n          backgroundColor: 'rgba(0, 0, 0, 0.05)',\n          fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n          fontSize: 16,\n          padding: 2\n        },\n        COLOR: {\n          color: '#E68989'\n        }\n      }\n    };\n\n    _this.onChange = function (editorState) {\n      return _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.handleKeyCommand = _this._handleKeyCommand.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.mapKeyToEditorCommand = _this._mapKeyToEditorCommand.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleBlockType = _this._toggleBlockType.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleInlineStyle = _this._toggleInlineStyle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.add = _this.add.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.edit = _this.edit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.save = _this.save.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.changeTitle = _this._changeTitle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this._handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this._handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChangeColor = _this._handleChangeColor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(RichEditorExample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initList();\n    }\n  }, {\n    key: \"_handleKeyCommand\",\n    value: function _handleKeyCommand(command, editorState) {\n      var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_mapKeyToEditorCommand\",\n    value: function _mapKeyToEditorCommand(e) {\n      if (e.keyCode === 9\n      /* TAB */\n      ) {\n          var newEditorState = _draftJs.RichUtils.onTab(e, this.state.editorState, 4\n          /* maxDepth */\n          );\n\n          if (newEditorState !== this.state.editorState) {\n            this.onChange(newEditorState);\n          }\n\n          return;\n        }\n\n      return (0, _draftJs.getDefaultKeyBinding)(e);\n    }\n  }, {\n    key: \"_toggleBlockType\",\n    value: function _toggleBlockType(blockType) {\n      this.onChange(_draftJs.RichUtils.toggleBlockType(this.state.editorState, blockType));\n    }\n  }, {\n    key: \"_toggleInlineStyle\",\n    value: function _toggleInlineStyle(inlineStyle) {\n      this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n    }\n  }, {\n    key: \"_changeTitle\",\n    value: function _changeTitle(val) {\n      this.setState({\n        title: val\n      });\n    }\n  }, {\n    key: \"_handleChangeColor\",\n    value: function _handleChangeColor(color) {\n      var obj = this.state.styleMap;\n      obj.COLOR = color.hex;\n      this.setState({\n        bgcolor: color.hex,\n        styleMap: obj,\n        someValueChanged: true\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      this.setState({\n        title: '',\n        editStatue: false,\n        editContent: '',\n        editorState: _draftJs.EditorState.createEmpty(),\n        editId: ''\n      });\n    }\n  }, {\n    key: \"edit\",\n    value: function edit() {\n      this.setState({\n        editStatue: false\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      var self = this;\n\n      if (this.state.title == null || this.state.title == '') {\n        alert('请输入标题');\n        return;\n      }\n\n      var content = (0, _draftJs.convertToRaw)(this.state.editorState.getCurrentContent());\n      var type = this.state.editId == '' ? 'create' : 'modify';\n      this.api(type, {\n        title: this.state.title,\n        content: content,\n        id: this.state.editId\n      }).then(function (res) {\n        if (res.success) {\n          self.initList();\n        }\n      });\n    }\n  }, {\n    key: \"initList\",\n    value: function initList() {\n      var self = this;\n      this.api('init').then(function (res) {\n        if (res.success) {\n          self.setState({\n            logList: res.list,\n            baseList: res.list\n          });\n        }\n      });\n    }\n  }, {\n    key: \"api\",\n    value: function api(type, param) {\n      return _index.logApi[type](param).then(function (response) {\n        return response.json();\n      });\n    }\n  }, {\n    key: \"clickTitle\",\n    value: function clickTitle(item) {\n      var blocks = (0, _draftJs.convertFromRaw)(item.content);\n\n      if (item) {\n        this.setState({\n          title: item.title,\n          editContent: item.content,\n          editStatue: true,\n          editorState: _draftJs.EditorState.createWithContent(blocks),\n          editId: item.id\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"filterList\",\n    value: function filterList(val) {\n      var list = this.state.baseList;\n\n      if (val && val != '') {\n        list = this.state.baseList.filter(function (ele) {\n          return ele.title.toLowerCase().indexOf(val.toLowerCase()) > -1;\n        });\n      }\n\n      this.setState({\n        logList: list\n      });\n    }\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      this.setState({\n        displayColorPicker: !this.state.displayColorPicker\n      });\n    }\n  }, {\n    key: \"_handleClose\",\n    value: function _handleClose() {\n      this.setState({\n        displayColorPicker: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          editorState = _this$state.editorState,\n          logList = _this$state.logList,\n          editStatue = _this$state.editStatue,\n          title = _this$state.title,\n          styleMap = _this$state.styleMap,\n          someValueChanged = _this$state.someValueChanged;\n      var popover = {\n        position: 'absolute',\n        zIndex: '2'\n      };\n      var cover = {\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px' // If the user changes block type before entering any text, we can\n        // either style the placeholder or hide it. Let's just hide it now.\n\n      };\n      var className = 'RichEditor-editor';\n      var contentState = editorState.getCurrentContent();\n\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      var forcedState = _draftJs.EditorState.forceSelection(editorState, editorState.getSelection());\n\n      return _react.default.createElement(\"div\", {\n        className: \"wrap\"\n      }, _react.default.createElement(\"div\", {\n        className: \"leftMenu\"\n      }, _react.default.createElement(_sideBar.default, {\n        logList: logList,\n        clickTitle: this.clickTitle.bind(this),\n        initList: this.initList.bind(this),\n        filterList: this.filterList.bind(this)\n      })), _react.default.createElement(\"div\", {\n        id: \"container\"\n      }, _react.default.createElement(\"div\", {\n        className: \"RichEditor-root\"\n      }, _react.default.createElement(\"div\", {\n        className: \"tooltip\"\n      }, _react.default.createElement(\"button\", {\n        onClick: this.add\n      }, \"\\u65B0\\u589E\"), \"\\xA0\", _react.default.createElement(\"button\", {\n        onClick: this.edit\n      }, \"\\u4FEE\\u6539\"), \"\\xA0\", _react.default.createElement(\"button\", {\n        onClick: this.save\n      }, \"\\u4FDD\\u5B58\")), _react.default.createElement(\"div\", {\n        className: \"styleList\"\n      }, _react.default.createElement(_styleController.BlockStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleBlockType\n      }), _react.default.createElement(_styleController.InlineStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleInlineStyle\n      }), _react.default.createElement(\"div\", {\n        className: \"pickColor\"\n      }, _react.default.createElement(\"div\", {\n        className: \"pickColor_div\",\n        onClick: this.handleClick\n      }), this.state.displayColorPicker ? _react.default.createElement(\"div\", {\n        style: popover\n      }, _react.default.createElement(\"div\", {\n        style: cover,\n        onClick: this.handleClose\n      }), _react.default.createElement(_reactColor.ChromePicker, {\n        color: this.state.bgcolor,\n        onChange: this.handleChangeColor\n      })) : null)), _react.default.createElement(\"div\", {\n        className: className,\n        onClick: this.focus,\n        style: {\n          backgroundColor: this.state.bgcolor\n        }\n      }, _react.default.createElement(\"div\", {\n        className: \"fileTitle\"\n      }, \"\\u6807\\u9898\\uFF1A\", _react.default.createElement(\"input\", {\n        type: \"text\",\n        disabled: editStatue,\n        value: title,\n        onChange: function onChange(e) {\n          return _this2.changeTitle(e.target.value);\n        }\n      })), _react.default.createElement(_draftJs.Editor, {\n        blockStyleFn: getBlockStyle,\n        customStyleMap: styleMap,\n        editorState: someValueChanged ? forcedState : editorState,\n        handleKeyCommand: this.handleKeyCommand,\n        keyBindingFn: this.mapKeyToEditorCommand,\n        onChange: this.onChange // placeholder=\"Tell a story...\"\n        ,\n        ref: \"editor\",\n        spellCheck: true,\n        readOnly: editStatue\n      })))));\n    }\n  }]);\n\n  return RichEditorExample;\n}(_react.default.Component);\n\n_reactDom.default.render(_react.default.createElement(RichEditorExample, null), document.getElementById('app'));","map":null},"hash":"fab3a909a449f5e08330b96b42ef6b07","cacheData":{"env":{}}}