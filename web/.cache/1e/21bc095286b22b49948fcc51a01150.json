{"id":"../node_modules/draft-js/lib/insertTextIntoContentState.js","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\package.json","includedInParent":true,"mtime":1542353447145},{"name":"immutable","loc":{"line":16,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\insertTextIntoContentState.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\immutable\\dist\\immutable.js"},{"name":"./insertIntoList","loc":{"line":18,"column":29},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\insertTextIntoContentState.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\insertIntoList.js"},{"name":"fbjs/lib/invariant","loc":{"line":19,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\insertTextIntoContentState.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\fbjs\\lib\\invariant.js"}],"generated":{"js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? \"development\" !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n  var len = text.length;\n\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n  var newOffset = offset + len;\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;","map":null},"hash":"a722db5d824fcc386d43b02f5d83d1c9","cacheData":{"env":{"NODE_ENV":"development"}}}