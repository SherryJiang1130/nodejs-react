{"id":"../node_modules/lodash/_stringToPath.js","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1542352705058},{"name":"./_memoizeCapped","loc":{"line":1,"column":28},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_stringToPath.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_memoizeCapped.js"}],"generated":{"js":"var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","map":null},"hash":"d40a824b351155e89aa9012b1965d5ce","cacheData":{"env":{}}}