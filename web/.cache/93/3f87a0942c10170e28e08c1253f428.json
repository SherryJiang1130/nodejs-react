{"id":"../node_modules/draft-js/lib/AtomicBlockUtils.js","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\package.json","includedInParent":true,"mtime":1542353447145},{"name":"object-assign","loc":{"line":16,"column":22},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\object-assign\\index.js"},{"name":"./BlockMapBuilder","loc":{"line":20,"column":30},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\BlockMapBuilder.js"},{"name":"./CharacterMetadata","loc":{"line":21,"column":32},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\CharacterMetadata.js"},{"name":"./ContentBlock","loc":{"line":22,"column":27},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\ContentBlock.js"},{"name":"./ContentBlockNode","loc":{"line":23,"column":31},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\ContentBlockNode.js"},{"name":"./DraftFeatureFlags","loc":{"line":24,"column":32},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftFeatureFlags.js"},{"name":"./DraftModifier","loc":{"line":25,"column":28},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftModifier.js"},{"name":"./EditorState","loc":{"line":26,"column":26},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\EditorState.js"},{"name":"immutable","loc":{"line":27,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\immutable\\dist\\immutable.js"},{"name":"./SelectionState","loc":{"line":28,"column":29},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\SelectionState.js"},{"name":"./generateRandomKey","loc":{"line":30,"column":32},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\generateRandomKey.js"},{"name":"./moveBlockInContentState","loc":{"line":31,"column":38},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\AtomicBlockUtils.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\moveBlockInContentState.js"}],"generated":{"js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar moveBlockInContentState = require('./moveBlockInContentState');\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\n\n\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n\n    var charData = CharacterMetadata.create({ entity: entityKey });\n\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _extends({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _extends({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var withMovedAtomicBlock = void 0;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\n\nmodule.exports = AtomicBlockUtils;","map":null},"hash":"effc9c0814250f13a1a0798d6b739545","cacheData":{"env":{}}}