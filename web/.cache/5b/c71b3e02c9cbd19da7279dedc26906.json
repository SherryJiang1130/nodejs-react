{"id":"../node_modules/draft-js/lib/keyCommandDeleteWord.js","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\package.json","includedInParent":true,"mtime":1542353447145},{"name":"./DraftRemovableWord","loc":{"line":16,"column":33},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\keyCommandDeleteWord.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\DraftRemovableWord.js"},{"name":"./EditorState","loc":{"line":17,"column":26},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\keyCommandDeleteWord.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\EditorState.js"},{"name":"./moveSelectionForward","loc":{"line":19,"column":35},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\keyCommandDeleteWord.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\moveSelectionForward.js"},{"name":"./removeTextWithStrategy","loc":{"line":20,"column":37},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\keyCommandDeleteWord.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\draft-js\\lib\\removeTextWithStrategy.js"}],"generated":{"js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandDeleteWord\n * @format\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionForward = require('./moveSelectionForward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */\nfunction keyCommandDeleteWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(offset);\n    var toRemove = DraftRemovableWord.getForward(text);\n\n    // If there are no words in front of the cursor, remove the newline.\n    return moveSelectionForward(strategyState, toRemove.length || 1);\n  }, 'forward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandDeleteWord;","map":null},"hash":"1a122b0796eef98b065313f02fd02d92","cacheData":{"env":{}}}