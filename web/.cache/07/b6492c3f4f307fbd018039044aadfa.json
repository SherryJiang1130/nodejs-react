{"id":"../node_modules/lodash/_baseClone.js","dependencies":[{"name":"D:\\myPro\\nodePro\\web\\package.json","includedInParent":true,"mtime":1543199527068},{"name":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1542352705058},{"name":"./_Stack","loc":{"line":1,"column":20},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_Stack.js"},{"name":"./_arrayEach","loc":{"line":2,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_arrayEach.js"},{"name":"./_assignValue","loc":{"line":3,"column":26},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_assignValue.js"},{"name":"./_baseAssign","loc":{"line":4,"column":25},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseAssign.js"},{"name":"./_baseAssignIn","loc":{"line":5,"column":27},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseAssignIn.js"},{"name":"./_cloneBuffer","loc":{"line":6,"column":26},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_cloneBuffer.js"},{"name":"./_copyArray","loc":{"line":7,"column":24},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_copyArray.js"},{"name":"./_copySymbols","loc":{"line":8,"column":26},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_copySymbols.js"},{"name":"./_copySymbolsIn","loc":{"line":9,"column":28},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_copySymbolsIn.js"},{"name":"./_getAllKeys","loc":{"line":10,"column":25},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_getAllKeys.js"},{"name":"./_getAllKeysIn","loc":{"line":11,"column":27},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_getAllKeysIn.js"},{"name":"./_getTag","loc":{"line":12,"column":21},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_getTag.js"},{"name":"./_initCloneArray","loc":{"line":13,"column":29},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_initCloneArray.js"},{"name":"./_initCloneByTag","loc":{"line":14,"column":29},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_initCloneByTag.js"},{"name":"./_initCloneObject","loc":{"line":15,"column":30},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_initCloneObject.js"},{"name":"./isArray","loc":{"line":16,"column":22},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\isArray.js"},{"name":"./isBuffer","loc":{"line":17,"column":23},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\isBuffer.js"},{"name":"./isMap","loc":{"line":18,"column":20},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\isMap.js"},{"name":"./isObject","loc":{"line":19,"column":23},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\isObject.js"},{"name":"./isSet","loc":{"line":20,"column":20},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\isSet.js"},{"name":"./keys","loc":{"line":21,"column":19},"parent":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\_baseClone.js","resolved":"D:\\myPro\\nodePro\\web\\node_modules\\lodash\\keys.js"}],"generated":{"js":"var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n\n    return result;\n  }\n\n  if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n\n    return result;\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","map":null},"hash":"a58beaef2ff8388b6033bbb876927059","cacheData":{"env":{}}}